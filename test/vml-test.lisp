(in-package :mkl.vml)

(defparameter n 100)
(defparameter s (make-array 100 :element-type 'double-float :initial-element 0.5d0))
(defparameter a (make-array 100 :element-type 'double-float :initial-element 3d0))
(defparameter -a (make-array 100 :element-type 'double-float :initial-element -3d0))
(defparameter b (make-array 100 :element-type 'double-float :initial-element 4d0))
(defparameter -b (make-array 100 :element-type 'double-float :initial-element 4d0))
(defparameter az (make-array 100 :element-type '(complex double-float) :initial-element #c(1d0 2d0)))
(defparameter bz (make-array 100 :element-type '(complex double-float) :initial-element #c(3d0 4d0)))
(defparameter y (make-array 100 :element-type 'double-float))
(defparameter yz (make-array 100 :element-type '(complex double-float)))
(defparameter z (make-array 100 :element-type 'double-float))
(defparameter ia (make-array 100 :element-type '(signed-byte 32) :initial-element 49))
(defparameter ma (make-array 100 :element-type '(signed-byte 32) :initial-element 1))

(defun reset-arrays ()
  (setf s (make-array 100 :element-type 'double-float :initial-element 0.5d0))
  (setf a (make-array 100 :element-type 'double-float :initial-element 3d0))
  (setf -a (make-array 100 :element-type 'double-float :initial-element -3d0))
  (setf b (make-array 100 :element-type 'double-float :initial-element 4d0))
  (setf -b (make-array 100 :element-type 'double-float :initial-element -4d0))
  (setf az (make-array 100 :element-type '(complex double-float) :initial-element #c(1d0 2d0)))
  (setf bz (make-array 100 :element-type '(complex double-float) :initial-element #c(3d0 4d0)))
  (setf y (make-array 100 :element-type 'double-float))
  (setf yz (make-array 100 :element-type '(complex double-float)))
  (setf z (make-array 100 :element-type 'double-float))
  (setf ia (make-array 100 :element-type '(signed-byte 32) :initial-element 49))
  (setf ma (make-array 100 :element-type '(signed-byte 32) :initial-element 1))
  nil)

